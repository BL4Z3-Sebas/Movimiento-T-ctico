package radar;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.RenderingHints;
import java.awt.geom.Path2D;

/**
 *
 * @author Alfonso
 */
public class DiagramaRadar2 extends javax.swing.JPanel {

    private double velocidad;
    private double posesion;
    private double remate;
    private double ataque;
    private double agilidad;
    private double defensa;

    /**
     * Creates new form DiagramaRadar2
     *
     * @param velocidad
     * @param posesion
     * @param remate
     */
    public DiagramaRadar2(double velocidad, double posesion, double remate) {
        initComponents();
        this.velocidad = velocidad / 100;
        this.posesion = posesion / 100;
        this.remate = remate / 100;
        this.ataque = (velocidad + remate) / 200;
        this.agilidad = (velocidad + posesion) / 200;
        this.defensa = (remate + posesion) / 200;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D) g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        int centroX = getWidth() / 2;
        int centroY = getHeight() / 2;
        int radio = 140;

        Polygon hexagono = crearPoligono(6, radio);
        g2.setColor(Color.orange);
        g2.draw(hexagono);

        for (double factor = 0.81; factor >= 0.0; factor -= 0.2) {
            Polygon hexagono_interior = crearPoligono(6, radio * factor);

            g2.setColor(Color.yellow);
            g2.draw(hexagono_interior);
        }

        g2.setColor(Color.black);
        g2.drawString("Velocidad", centroX - 10, centroY - radio - 20);

        Path2D grafico_equipo = new Path2D.Double();
        //Dibujar el grafico del equipo
        double velocidadX = centroX + velocidad * radio * Math.cos(Math.toRadians(90));
        double velocidadY = centroY - velocidad * radio * Math.sin(Math.toRadians(90));
        grafico_equipo.moveTo(velocidadX, velocidadY);

        double agilidadX = centroX + agilidad * radio * Math.cos(Math.toRadians(150));
        double agilidadY = centroY - agilidad * radio * Math.sin(Math.toRadians(150));
        grafico_equipo.moveTo(agilidadX, agilidadY);

        double posesionX = centroX + posesion * radio * Math.cos(Math.toRadians(210));
        double posesionY = centroY - posesion * radio * Math.sin(Math.toRadians(210));
        grafico_equipo.moveTo(posesionX, posesionY);

        double defensaX = centroX + defensa * radio * Math.cos(Math.toRadians(270));
        double defensaY = centroY - defensa * radio * Math.sin(Math.toRadians(270));
        grafico_equipo.moveTo(defensaX, defensaY);

        double remateX = centroX + remate * radio * Math.cos(Math.toRadians(330));
        double remateY = centroY - remate * radio * Math.sin(Math.toRadians(330));
        grafico_equipo.moveTo(remateX, remateY);

        double ataqueX = centroX + ataque * radio * Math.cos(Math.toRadians(30));
        double ataqueY = centroY - ataque * radio * Math.sin(Math.toRadians(30));
        grafico_equipo.moveTo(ataqueX, ataqueY);

        grafico_equipo.closePath();

        g2.setColor(Color.blue);
        g2.setStroke(new BasicStroke(2));
        g2.draw(grafico_equipo);

        g2.setColor(Color.red);
        g2.fillOval((int) velocidadX - 4, (int) velocidadY - 4, 10, 10);
        g2.fillOval((int) agilidadX - 4, (int) agilidadY - 4, 10, 10);
        g2.fillOval((int) posesionX - 4, (int) posesionY - 4, 10, 10);
        g2.fillOval((int) defensaX - 4, (int) defensaY - 4, 10, 10);
        g2.fillOval((int) remateX - 4, (int) remateY - 4, 10, 10);
        g2.fillOval((int) ataqueX - 4, (int) ataqueY - 4, 10, 10);

        revalidate();
        repaint();
    }

    private Polygon crearPoligono(int numeroLados, double radio) {
        Polygon poligono = new Polygon();
        double grados = 360 / numeroLados;
        for (int i = 0; i < numeroLados; i++) {
            double radianes = Math.toRadians(90 + i * grados);
            int x = (int) (getWidth() / 2 + radio * Math.cos(radianes));
            int y = (int) (getHeight() / 2 - radio * Math.sin(radianes));

            poligono.addPoint(x, y);
        }

        return poligono;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
